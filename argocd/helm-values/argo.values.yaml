nameOverride: argocd
namespaceOverride: "argocd"

crds:
  install: true
  keep: true

global:
  domain: argocd.kube.mecan.ir
  image:
    repository: quay.io/argoproj/argocd
    tag: ""
    imagePullPolicy: IfNotPresent

configs:
  secret:
    # -- Bcrypt hashed admin password
    ## Argo expects the password in the secret to be bcrypt hashed. You can create this hash with
    ## `htpasswd -nbBC 10 USERNAME PASSWORD`
    ## htpasswd -nbBC 10 admin 1i1ziuyBNM5r4CjaVSHiSLaFPGsVcd81eMfSd8KR
    argocdServerAdminPassword: "$2y$10$p.Khe721069ttqJCxpIN/.ovHgTbWxTAXIAInygCHjfQPE93uzxki"
  params:
    server.insecure: true

controller:
  name: application-controller
  replicas: 1
  resources:
    limits:
      cpu: 1500m
      memory: 2048Mi
    requests:
      cpu: 500m
      memory: 512Mi
  metrics:
    enabled: true
    service:
      type: ClusterIP
      servicePort: 8082
      portName: http-metrics
    serviceMonitor:
      enabled: false
      interval: 30s
      namespace: monitoring

server:
  name: server
  replicas: 1

  ingress:
    enabled: true
    controller: generic
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt
      certmanager.k8s.io/acme-http01-edit-in-place: "false"
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
    ingressClassName: "nginx"
    hostname: "argocd.kube.mecan.ir"
    path: /
    pathType: Prefix
    tls:
      - secretName: argocd-general-tls
        hosts:
          - argocd.kube.mecan.ir

notifications:
  enabled: true
  name: notifications-controller
  argocdUrl: "argocd.kube.mecan.ir"
  secret:
    create: true
    name: "argocd-notifications-secret"
    annotations: {}
    labels: {}
    items:
      email-username: ahmadnotif@gmail.com
      email-password: xxxxxxxxxxxxxxxxxxxx
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi
  cm:
    create: true

  subscriptions:
    # subscription for on-sync-status-unknown trigger notifications
    - recipients:
      - email:yyyyyyyyyyyyyyyyyyyyyyyyyyy
      triggers:
      - on-sync-status-unknown
    # subscription restricted to applications with matching labels only
    - recipients:
      - email:yyyyyyyyyyyyyyyyyyyyyyyyyyy
      selector: test=true
      triggers:
      - on-sync-status-unknown
  templates:
    template.app-deployed: |
      email:
        subject: New version of an application {{.app.metadata.name}} is up and running.
      message: |
        {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.
    template.app-health-degraded: |
      email:
        subject: Application {{.app.metadata.name}} has degraded.
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.
        Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
    template.app-sync-failed: |
      email:
        subject: Failed to sync application {{.app.metadata.name}}.
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
    template.app-sync-running: |
      email:
        subject: Start syncing application {{.app.metadata.name}}.
      message: |
        The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
    template.app-sync-status-unknown: |
      email:
        subject: Application {{.app.metadata.name}} sync status is 'Unknown'
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.
        Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
        {{if ne .serviceType "slack"}}
        {{range $c := .app.status.conditions}}
            * {{$c.message}}
        {{end}}
        {{end}}
    template.app-sync-succeeded: |
      email:
        subject: Application {{.app.metadata.name}} has been successfully synced.
      message: |
        {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .

  # -- The trigger defines the condition when the notification should be sent
  ## For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/triggers/
  triggers:
    trigger.on-deployed: |
      - description: Application is synced and healthy. Triggered once per commit.
        oncePer: app.status.sync.revision
        send:
        - app-deployed
        when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
    trigger.on-health-degraded: |
      - description: Application has degraded
        send:
        - app-health-degraded
        when: app.status.health.status == 'Degraded'
    trigger.on-sync-failed: |
      - description: Application syncing has failed
        send:
        - app-sync-failed
        when: app.status.operationState.phase in ['Error', 'Failed']
    trigger.on-sync-running: |
      - description: Application is being synced
        send:
        - app-sync-running
        when: app.status.operationState.phase in ['Running']
    trigger.on-sync-status-unknown: |
      - description: Application status is 'Unknown'
        send:
        - app-sync-status-unknown
        when: app.status.sync.status == 'Unknown'
    trigger.on-sync-succeeded: |
      - description: Application syncing has succeeded
        send:
        - app-sync-succeeded
        when: app.status.operationState.phase in ['Succeeded']
