version: '3.8'

volumes:
  elasticsearch_data:
    name: elasticsearch_data
  filebeat_logstash_data:
    name: filebeat_logstash_data
  filebeat_elasticsearch_data:
    name: filebeat_elasticsearch_data
  auditbeat_data:
    name: auditbeat_data
  metricbeat_data:
    name: metricbeat_data
  packetbeat_data:
    name: packetbeat_data

networks:
  web_net:
    external: true
    name: web_net
  elk_net:
    external: true
    name: elk_net

services:
  elasticsearch:
    image: elasticsearch:${ELK_VERSION}
    container_name: elasticsearch
    restart: ${RESTART_POLICY}
    environment:
      ES_JAVA_OPTS: "-Xmx512m -Xms512m"
      ELASTIC_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTIC_PASSWORD: ${ELASTICSEARCH_PASSWORD}
      node.name: elasticsearch
      network.host: 0.0.0.0
      http.port: 9200
      cluster.name: docker-cluster
      discovery.type: single-node
      bootstrap.memory_lock: "true"
      http.cors.enabled: "true"
      xpack.security.authc.api_key.enabled: "true"
      xpack.license.self_generated.type: basic
      xpack.security.enabled: "true"
      xpack.monitoring.collection.enabled: "true"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./elasticsearch/health-check.sh:/usr/share/elasticsearch/health-check.sh
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - web_net
      - elk_net
    healthcheck:
      test: [ "CMD", "sh",  "/usr/share/elasticsearch/health-check.sh" ]
      interval: 30s
      timeout: 3s
    labels:
      - traefik.enable=true
      - traefik.docker.network=web_net
      - traefik.http.routers.elasticsearch.entrypoints=http
      - traefik.http.routers.elasticsearch.rule=Host(`${ELASTICSEARCH_SUB_DOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.elasticsearch.middlewares=https-redirect
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.routers.elasticsearch-secure.entrypoints=https
      - traefik.http.routers.elasticsearch-secure.rule=Host(`${ELASTICSEARCH_SUB_DOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.elasticsearch-secure.tls=true
      - traefik.http.routers.elasticsearch-secure.tls.options=default
      - traefik.http.routers.elasticsearch-secure.tls.certresolver=mycert
      - traefik.http.services.elasticsearch.loadbalancer.server.port=9200

  logstash:
    image: logstash:${ELK_VERSION}
    container_name: logstash
    restart: ${RESTART_POLICY}
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx1g -Xms1g"
      ELASTICSEARCH_HOSTNAME: ${ELASTICSEARCH_HOSTNAME}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}
    networks:
      - elk_net
    depends_on:
      elasticsearch:
        condition: service_healthy

  kibana:
    image: kibana:${ELK_VERSION}
    container_name: kibana
    restart: ${RESTART_POLICY}
    environment:
      - "SERVERNAME=kibana"
      - "ELASTICSEARCH_HOSTNAME=${ELASTICSEARCH_HOSTNAME}"
      - "ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}"
      - "ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}"
      - "KIBANA_PUBLIC_URL=${KIBANA_PUBLIC_URL}"
      - "MONITORING_UI_CONTAINER_ELASTICSEARCH_ENABLED=true"
      - "XPACK_FLEET_ENABLED=true"
      - "XPACK_FLEET_AGENTS_ENABLED=true"
      - "XPACK_FLEET_AGENTS_ELASTICSEARCH_HOST=${ELASTICSEARCH_HOSTNAME}"
      - "XPACK_FLEET_AGENTS_FLEET_SERVER_HOSTS=[\"http://fleet:8220\"]"
      - "XPACK_FLEET_AGENTS_TLSCHECKDISABLED=true"
    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    healthcheck:
      test: "curl -f http://localhost:5601/login | grep kbn-injected-metadata 2>&1 >/dev/null"
      retries: 600
      interval: 1s
    networks:
      - web_net
      - elk_net
    depends_on:
      elasticsearch:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web_net"
      - "traefik.http.routers.kibana.entrypoints=http"
      - "traefik.http.routers.kibana.rule=Host(`${KIBANA_SUB_DOMAIN}.${DOMAIN_NAME}`)"
      - "traefik.http.routers.kibana.middlewares=https-redirect"
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.kibana-secure.entrypoints=https"
      - "traefik.http.routers.kibana-secure.rule=Host(`${KIBANA_SUB_DOMAIN}.${DOMAIN_NAME}`)"
      - "traefik.http.routers.kibana-secure.tls=true"
      - "traefik.http.routers.kibana-secure.tls.options=default"
      - "traefik.http.routers.kibana-secure.tls.certresolver=mycert"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"

  fleet:
    image: elastic/elastic-agent:${ELK_VERSION}
    restart: ${RESTART_POLICY}
    container_name: fleet
    hostname: "${FLEET_SUB_DOMAIN}.${DOMAIN_NAME}"
    environment:
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOSTNAME}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}
      FLEET_SERVER_ENABLE: true
      FLEET_SERVER_ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOSTNAME}
      FLEET_SERVER_INSECURE_HTTP: true
      KIBANA_FLEET_SETUP: true
      KIBANA_FLEET_HOST: ${KIBANA_HOSTNAME}
      FLEET_SERVER_HOST: 0.0.0.0
      FLEET_SERVER_PORT: 8220
    networks:
      - elk_net
      - web_net
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    healthcheck:
      test: "curl -f http://127.0.0.1:8220/api/status | grep HEALTHY 2>&1 >/dev/null"
      retries: 12
      interval: 5s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web_net"
      - "traefik.http.routers.fleet.entrypoints=http"
      - "traefik.http.routers.fleet.rule=Host(`${FLEET_SUB_DOMAIN}.${DOMAIN_NAME}`)"
      - "traefik.http.routers.fleet.middlewares=https-redirect"
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.fleet-secure.entrypoints=https"
      - "traefik.http.routers.fleet-secure.rule=Host(`${FLEET_SUB_DOMAIN}.${DOMAIN_NAME}`)"
      - "traefik.http.routers.fleet-secure.tls=true"
      - "traefik.http.routers.fleet-secure.tls.options=default"
      - "traefik.http.routers.fleet-secure.tls.certresolver=mycert"
      - "traefik.http.services.fleet.loadbalancer.server.port=8220"

  filebeat-logstash:
    image: elastic/filebeat:${ELK_VERSION}
    user: root
    container_name: filebeat-logstash
    hostname: "filebeat-logstash-${HOSTNAME}"
    restart: ${RESTART_POLICY}
    command: ["--strict.perms=false"]
    environment:
      ELASTICSEARCH_HOSTNAME: ${ELASTICSEARCH_HOSTNAME}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}
      KIBANA_HOSTNAME: ${KIBANA_HOSTNAME}
    volumes:
      - ./filebeat-logstash/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/log:/var/log:ro
      - filebeat_logstash_data:/var/lib/filebeat/data
    networks:
      - elk_net
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy

  filebeat-elasticsearch:
    image: elastic/filebeat:${ELK_VERSION}
    user: root
    container_name: filebeat-elasticsearch
    hostname: "filebeat-elasticsearch-${HOSTNAME}"
    restart: ${RESTART_POLICY}
    command: ["--strict.perms=false"]
    environment:
      ELASTICSEARCH_HOSTNAME: ${ELASTICSEARCH_HOSTNAME}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}
      KIBANA_HOSTNAME: ${KIBANA_HOSTNAME}
    volumes:
      - ./filebeat-elasticsearch/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/log:/var/log:ro
      - filebeat_elasticsearch_data:/var/lib/filebeat/data
    networks:
      - elk_net
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy

  auditbeat:
    image: elastic/auditbeat:${ELK_VERSION}
    container_name: auditbeat
    hostname: "auditbeat-${HOSTNAME}"
    user: root
    pid: host
    restart: ${RESTART_POLICY}
    cap_add:
      - AUDIT_CONTROL
      - AUDIT_READ
    environment:
      ELASTICSEARCH_HOSTNAME: ${ELASTICSEARCH_HOSTNAME}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}
      KIBANA_HOSTNAME: ${KIBANA_HOSTNAME}
    command: ["--strict.perms=false"]
    volumes:
      - ./auditbeat/auditbeat.yml:/usr/share/auditbeat/auditbeat.yml:ro
      - /var/log:/var/log:ro
      - auditbeat_data:/usr/share/auditbeat/data
    networks:
      - elk_net
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy

  metricbeat:
    image: elastic/metricbeat:${ELK_VERSION}
    hostname: "metricbeat-${HOSTNAME}"
    container_name: metricbeat
    restart: ${RESTART_POLICY}
    user: root
    volumes:
      - ./metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /:/hostfs:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - metricbeat_data:/usr/share/metricbeat/data
    environment:
      ELASTICSEARCH_HOSTNAME: ${ELASTICSEARCH_HOSTNAME}
      KIBANA_HOSTNAME: ${KIBANA_HOSTNAME}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}
    command: ["--strict.perms=false", "-system.hostfs=/hostfs"]
    networks:
      - elk_net
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy

  packetbeat:
    image: elastic/packetbeat:${ELK_VERSION}
    hostname: "packetbeat-${HOSTNAME}"
    container_name: packetbeat
    user: root
    restart: ${RESTART_POLICY}
    volumes:
      - packetbeat_data:/usr/share/packetbeat/data
      - ./packetbeat/packetbeat.yml:/usr/share/packetbeat/packetbeat.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      ELASTICSEARCH_HOSTNAME: ${ELASTICSEARCH_HOSTNAME}
      KIBANA_HOSTNAME: ${KIBANA_HOSTNAME}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}
    cap_add:
      - NET_RAW
      - NET_ADMIN
    command: ["--strict.perms=false"]
    networks:
      - elk_net
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy

  heartbeat:
    image: elastic/heartbeat:${ELK_VERSION}
    hostname: "heartbeat-${HOSTNAME}"
    container_name: heartbeat
    user: root
    restart: ${RESTART_POLICY}
    volumes:
      - ./heartbeat/heartbeat.yml:/usr/share/heartbeat/heartbeat.yml:ro
    environment:
      ELASTICSEARCH_HOSTNAME: ${ELASTICSEARCH_HOSTNAME}
      KIBANA_HOSTNAME: ${KIBANA_HOSTNAME}
      KIBANA_PUBLIC_URL: ${KIBANA_PUBLIC_URL}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}
    command: ["--strict.perms=false"]
    networks:
      - elk_net
      - web_net
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy

  apm-server:
    image: elastic/apm-server:${ELK_VERSION}
    container_name: apm-server
    hostname: "apm-${HOSTNAME}"
    restart: ${RESTART_POLICY}
    volumes:
      - ./apm-server/apm-server.yml:/usr/share/apm-server/apm-server.yml:ro
    environment:
      ELASTICSEARCH_HOSTNAME: ${ELASTICSEARCH_HOSTNAME}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}
      ELASTICSEARCH_APM_SECRET_TOKEN: ${ELASTICSEARCH_APM_SECRET_TOKEN}
    networks:
      - elk_net
    depends_on:
      elasticsearch:
        condition: service_healthy
