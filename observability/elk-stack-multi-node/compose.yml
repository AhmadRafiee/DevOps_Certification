name: elk-stack-cluster

networks:
  web_net:
    name: web_net
    external: true
  app_net:
    name: app_net
    external: true

volumes:
  es1_data:
    name: es1_data
    external: false
  es2_data:
    name: es2_data
    external: false
  es3_data:
    name: es3_data
    external: false

secrets:
  elasticsearch.keystore:
    file: ./secrets/keystore/elasticsearch.keystore
  elasticsearch.service_tokens:
    file: ./secrets/service_tokens
  elastic.ca:
    file: ./secrets/certs/ca/ca.crt
  elasticsearch.certificate:
    file: ./secrets/certs/elasticsearch/elasticsearch.crt
  elasticsearch.key:
    file: ./secrets/certs/elasticsearch/elasticsearch.key
  kibana.certificate:
    file: ./secrets/certs/kibana/kibana.crt
  kibana.key:
    file: ./secrets/certs/kibana/kibana.key
  fleet.certificate:
    file: ./secrets/certs/fleet/fleet.crt
  fleet.key:
    file: ./secrets/certs/fleet/fleet.key
  apm-server.certificate:
    file: ./secrets/certs/apm-server/apm-server.crt
  apm-server.key:
    file: ./secrets/certs/apm-server/apm-server.key

configs:
  elasticsearch:
    file: ./elasticsearch/elasticsearch.yml
  logstash:
    file: ./logstash/config/logstash.yml
  kibana:
    file: ./kibana/kibana.yml
  log4j2:
    file: ./elasticsearch/log4j2.properties
  pipelines:
    file: ./logstash/config/pipelines.yml

services:
  elasticsearch-node-1:
    image: elasticsearch:${ELK_VERSION}
    container_name: elasticsearch-node-1
    restart: ${RESTART_POLICY}
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTIC_CLUSTER_NAME: ${ELASTIC_CLUSTER_NAME}
      ELASTIC_NODE_NAME: ${ELASTIC_NODE_NAME_1}
      ELASTIC_INIT_MASTER_NODE: ${ELASTIC_INIT_MASTER_NODE}
      ELASTIC_DISCOVERY_SEEDS: ${ELASTIC_DISCOVERY_SEEDS}
      ES_JAVA_OPTS: "-Xmx${ELASTICSEARCH_HEAP} -Xms${ELASTICSEARCH_HEAP} -Des.enforce.bootstrap.checks=true -Dlog4j2.formatMsgNoLookups=true"
      bootstrap.memory_lock: "true"
    volumes:
      - es1_data:/usr/share/elasticsearch/data
    configs:
      - source: log4j2
        target: /usr/share/elasticsearch/config/log4j2.properties
      - source: elasticsearch
        target: /usr/share/elasticsearch/config/elasticsearch.yml
    secrets:
      - source: elasticsearch.keystore
        target: /usr/share/elasticsearch/config/elasticsearch.keystore
      - source: elasticsearch.service_tokens
        target: /usr/share/elasticsearch/config/service_tokens
      - source: elastic.ca
        target: /usr/share/elasticsearch/config/certs/ca.crt
      - source: elasticsearch.certificate
        target: /usr/share/elasticsearch/config/certs/elasticsearch.crt
      - source: elasticsearch.key
        target: /usr/share/elasticsearch/config/certs/elasticsearch.key
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 200000
        hard: 200000
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -sf --insecure https://$ELASTIC_USERNAME:$ELASTIC_PASSWORD@localhost:9200/_cat/health | grep -ioE 'green|yellow' || echo 'not green/yellow cluster status'"]
      interval: 30s
      timeout: 3s
    networks:
      - web_net
      - app_net
    labels:
      - traefik.enable=true
      - traefik.docker.network=web_net
      - traefik.http.routers.es1.entrypoints=http
      - traefik.http.routers.es1.rule=Host(`${ES1_SUB_DOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.es1.middlewares=https-redirect
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.routers.es1-secure.entrypoints=https
      - traefik.http.routers.es1-secure.rule=Host(`${ES1_SUB_DOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.es1-secure.tls=true
      - traefik.http.routers.es1-secure.tls.options=default
      - traefik.http.routers.es1-secure.tls.certresolver=mycert
      - traefik.http.services.es1.loadbalancer.server.scheme=https
      - traefik.http.services.es1.loadbalancer.server.port=9200

  elasticsearch-node-2:
    image: elasticsearch:${ELK_VERSION}
    container_name: elasticsearch-node-2
    restart: ${RESTART_POLICY}
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTIC_CLUSTER_NAME: ${ELASTIC_CLUSTER_NAME}
      ELASTIC_NODE_NAME: ${ELASTIC_NODE_NAME_2}
      ELASTIC_INIT_MASTER_NODE: ${ELASTIC_INIT_MASTER_NODE}
      ELASTIC_DISCOVERY_SEEDS: ${ELASTIC_DISCOVERY_SEEDS}
      ES_JAVA_OPTS: -Xmx${ELASTICSEARCH_HEAP} -Xms${ELASTICSEARCH_HEAP} -Des.enforce.bootstrap.checks=true
      bootstrap.memory_lock: "true"
    volumes:
      - es2_data:/usr/share/elasticsearch/data
    configs:
      - source: log4j2
        target: /usr/share/elasticsearch/config/log4j2.properties
      - source: elasticsearch
        target: /usr/share/elasticsearch/config/elasticsearch.yml
    secrets:
      - source: elasticsearch.keystore
        target: /usr/share/elasticsearch/config/elasticsearch.keystore
      - source: elasticsearch.service_tokens
        target: /usr/share/elasticsearch/config/service_tokens
      - source: elastic.ca
        target: /usr/share/elasticsearch/config/certs/ca.crt
      - source: elasticsearch.certificate
        target: /usr/share/elasticsearch/config/certs/elasticsearch.crt
      - source: elasticsearch.key
        target: /usr/share/elasticsearch/config/certs/elasticsearch.key
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 200000
        hard: 200000
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -sf --insecure https://$ELASTIC_USERNAME:$ELASTIC_PASSWORD@localhost:9200/_cat/health | grep -ioE 'green|yellow' || echo 'not green/yellow cluster status'"]
      interval: 30s
      timeout: 3s
    networks:
      - web_net
      - app_net
    labels:
      - traefik.enable=true
      - traefik.docker.network=web_net
      - traefik.http.routers.es2.entrypoints=http
      - traefik.http.routers.es2.rule=Host(`${ES2_SUB_DOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.es2.middlewares=https-redirect
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.routers.es2-secure.entrypoints=https
      - traefik.http.routers.es2-secure.rule=Host(`${ES2_SUB_DOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.es2-secure.tls=true
      - traefik.http.routers.es2-secure.tls.options=default
      - traefik.http.routers.es2-secure.tls.certresolver=mycert
      - traefik.http.services.es2.loadbalancer.server.scheme=https
      - traefik.http.services.es2.loadbalancer.server.port=9200

  elasticsearch-node-3:
    image: elasticsearch:${ELK_VERSION}
    container_name: elasticsearch-node-3
    restart: ${RESTART_POLICY}
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTIC_CLUSTER_NAME: ${ELASTIC_CLUSTER_NAME}
      ELASTIC_NODE_NAME: ${ELASTIC_NODE_NAME_3}
      ELASTIC_INIT_MASTER_NODE: ${ELASTIC_INIT_MASTER_NODE}
      ELASTIC_DISCOVERY_SEEDS: ${ELASTIC_DISCOVERY_SEEDS}
      ES_JAVA_OPTS: -Xmx${ELASTICSEARCH_HEAP} -Xms${ELASTICSEARCH_HEAP} -Des.enforce.bootstrap.checks=true
      bootstrap.memory_lock: "true"
    volumes:
      - es3_data:/usr/share/elasticsearch/data
    configs:
      - source: log4j2
        target: /usr/share/elasticsearch/config/log4j2.properties
      - source: elasticsearch
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        mode: 0644
    secrets:
      - source: elasticsearch.keystore
        target: /usr/share/elasticsearch/config/elasticsearch.keystore
      - source: elasticsearch.service_tokens
        target: /usr/share/elasticsearch/config/service_tokens
      - source: elastic.ca
        target: /usr/share/elasticsearch/config/certs/ca.crt
      - source: elasticsearch.certificate
        target: /usr/share/elasticsearch/config/certs/elasticsearch.crt
      - source: elasticsearch.key
        target: /usr/share/elasticsearch/config/certs/elasticsearch.key
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 200000
        hard: 200000
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -sf --insecure https://$ELASTIC_USERNAME:$ELASTIC_PASSWORD@localhost:9200/_cat/health | grep -ioE 'green|yellow' || echo 'not green/yellow cluster status'"]
      interval: 30s
      timeout: 3s
    networks:
      - web_net
      - app_net
    labels:
      - traefik.enable=true
      - traefik.docker.network=web_net
      - traefik.http.routers.es3.entrypoints=http
      - traefik.http.routers.es3.rule=Host(`${ES3_SUB_DOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.es3.middlewares=https-redirect
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.routers.es3-secure.entrypoints=https
      - traefik.http.routers.es3-secure.rule=Host(`${ES3_SUB_DOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.es3-secure.tls=true
      - traefik.http.routers.es3-secure.tls.options=default
      - traefik.http.routers.es3-secure.tls.certresolver=mycert
      - traefik.http.services.es3.loadbalancer.server.scheme=https
      - traefik.http.services.es3.loadbalancer.server.port=9200

  logstash-node-1:
    image: logstash:${ELK_VERSION}
    restart: ${RESTART_POLICY}
    container_name: logstash-node-1
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTICSEARCH_CLUSTER_HOSTS: ${ELASTICSEARCH_CLUSTER_HOSTS}
      LS_JAVA_OPTS: "-Xmx${LOGSTASH_HEAP} -Xms${LOGSTASH_HEAP} -Dlog4j2.formatMsgNoLookups=true"
    configs:
      - source: logstash
        target: /usr/share/logstash/config/logstash.yml
      - source: pipelines
        target: /usr/share/logstash/config/pipelines.yml
    secrets:
      - source: elastic.ca
        target: /certs/ca.crt
    ports:
      - "5044:5044"
      - "9600:9600"
    healthcheck:
      test: ["CMD", "curl", "-s" ,"-XGET", "http://127.0.0.1:9600"]
      interval: 60s
      timeout: 30s
      retries: 5
    networks:
      - app_net
    depends_on:
      elasticsearch-node-1:
        condition: service_healthy
      elasticsearch-node-2:
        condition: service_healthy
      elasticsearch-node-3:
        condition: service_healthy

  logstash-node-2:
    image: logstash:${ELK_VERSION}
    restart: ${RESTART_POLICY}
    container_name: logstash-node-2
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTICSEARCH_CLUSTER_HOSTS: ${ELASTICSEARCH_CLUSTER_HOSTS}
      LS_JAVA_OPTS: "-Xmx${LOGSTASH_HEAP} -Xms${LOGSTASH_HEAP} -Dlog4j2.formatMsgNoLookups=true"
    configs:
      - source: logstash
        target: /usr/share/logstash/config/logstash.yml
      - source: pipelines
        target: /usr/share/logstash/config/pipelines.yml
    secrets:
      - source: elastic.ca
        target: /certs/ca.crt
    #ports:
    #  - "5044:5044"
    #  - "9600:9600"
    healthcheck:
      test: ["CMD", "curl", "-s" ,"-XGET", "http://127.0.0.1:9600"]
      interval: 60s
      timeout: 30s
      retries: 5
    networks:
      - app_net
    depends_on:
      elasticsearch-node-1:
        condition: service_healthy
      elasticsearch-node-2:
        condition: service_healthy
      elasticsearch-node-3:
        condition: service_healthy

  logstash-node-3:
    image: logstash:${ELK_VERSION}
    restart: ${RESTART_POLICY}
    container_name: logstash-node-3
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTICSEARCH_CLUSTER_HOSTS: ${ELASTICSEARCH_CLUSTER_HOSTS}
      LS_JAVA_OPTS: "-Xmx${LOGSTASH_HEAP} -Xms${LOGSTASH_HEAP} -Dlog4j2.formatMsgNoLookups=true"
    configs:
      - source: logstash
        target: /usr/share/logstash/config/logstash.yml
      - source: pipelines
        target: /usr/share/logstash/config/pipelines.yml
    secrets:
      - source: elastic.ca
        target: /certs/ca.crt
    #ports:
    #  - "5044:5044"
    #  - "9600:9600"
    healthcheck:
      test: ["CMD", "curl", "-s" ,"-XGET", "http://127.0.0.1:9600"]
      interval: 60s
      timeout: 30s
      retries: 5
    networks:
      - app_net
    depends_on:
      elasticsearch-node-1:
        condition: service_healthy
      elasticsearch-node-2:
        condition: service_healthy
      elasticsearch-node-3:
        condition: service_healthy

  kibana-node-1:
    image: kibana:${ELK_VERSION}
    restart: ${RESTART_POLICY}
    container_name: kibana-node-1
    environment:
      - "ELASTIC_USERNAME=${ELASTIC_USERNAME}"
      - "ELASTIC_PASSWORD=${ELASTIC_PASSWORD}"
      - "ELASTICSEARCH_CLUSTER_HOSTS=${ELASTICSEARCH_CLUSTER_HOSTS}"
      - "SERVERNAME=kibana"
      - "KIBANA_PUBLIC_URL=${KIBANA_PUBLIC_URL}"
      - "MONITORING_UI_CONTAINER_ELASTICSEARCH_ENABLED=true"
    env_file:
      - ./secrets/.env.kibana.token
    configs:
      - source: kibana
        target: /usr/share/kibana/config/kibana.yml
    secrets:
      - source: elastic.ca
        target: /certs/ca.crt
      - source: kibana.certificate
        target: /certs/kibana.crt
      - source: kibana.key
        target: /certs/kibana.key
    networks:
      - web_net
      - app_net
    depends_on:
      elasticsearch-node-1:
        condition: service_healthy
      elasticsearch-node-2:
        condition: service_healthy
      elasticsearch-node-3:
        condition: service_healthy
    healthcheck:
      test: "curl -kf https://localhost:5601/login | grep kbn-injected-metadata 2>&1 >/dev/null"
      retries: 60
      interval: 30s
    labels:
      - traefik.enable=true
      - traefik.docker.network=web_net
      - traefik.http.routers.kibana1.entrypoints=http
      - traefik.http.routers.kibana1.rule=Host(`${KIBANA1_SUB_DOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.kibana1.middlewares=https-redirect
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.routers.kibana1-secure.entrypoints=https
      - traefik.http.routers.kibana1-secure.rule=Host(`${KIBANA1_SUB_DOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.kibana1-secure.tls=true
      - traefik.http.routers.kibana1-secure.tls.options=default
      - traefik.http.routers.kibana1-secure.tls.certresolver=mycert
      - traefik.http.services.kibana1.loadbalancer.server.scheme=https
      - traefik.http.services.kibana1.loadbalancer.server.port=5601

  kibana-node-2:
    image: kibana:${ELK_VERSION}
    restart: ${RESTART_POLICY}
    container_name: kibana-node-2
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTICSEARCH_CLUSTER_HOSTS: ${ELASTICSEARCH_CLUSTER_HOSTS}
      SERVERNAME: kibana
      KIBANA_PUBLIC_URL: ${KIBANA_PUBLIC_URL}
      MONITORING_UI_CONTAINER_ELASTICSEARCH_ENABLED: true
    env_file:
      - ./secrets/.env.kibana.token
    configs:
      - source: kibana
        target: /usr/share/kibana/config/kibana.yml
    secrets:
      - source: elastic.ca
        target: /certs/ca.crt
      - source: kibana.certificate
        target: /certs/kibana.crt
      - source: kibana.key
        target: /certs/kibana.key
    networks:
      - web_net
      - app_net
    depends_on:
      elasticsearch-node-1:
        condition: service_healthy
      elasticsearch-node-2:
        condition: service_healthy
      elasticsearch-node-3:
        condition: service_healthy
    healthcheck:
      test: "curl -kf https://localhost:5601/login | grep kbn-injected-metadata 2>&1 >/dev/null"
      retries: 60
      interval: 30s
    labels:
      - traefik.enable=true
      - traefik.docker.network=web_net
      - traefik.http.routers.kibana2.entrypoints=http
      - traefik.http.routers.kibana2.rule=Host(`${KIBANA2_SUB_DOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.kibana2.middlewares=https-redirect
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.routers.kibana2-secure.entrypoints=https
      - traefik.http.routers.kibana2-secure.rule=Host(`${KIBANA2_SUB_DOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.kibana2-secure.tls=true
      - traefik.http.routers.kibana2-secure.tls.options=default
      - traefik.http.routers.kibana2-secure.tls.certresolver=mycert
      - traefik.http.services.kibana2.loadbalancer.server.scheme=https
      - traefik.http.services.kibana2.loadbalancer.server.port=5601

  kibana-node-3:
    image: kibana:${ELK_VERSION}
    restart: ${RESTART_POLICY}
    container_name: kibana-node-3
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTICSEARCH_CLUSTER_HOSTS: ${ELASTICSEARCH_CLUSTER_HOSTS}
      SERVERNAME: kibana
      KIBANA_PUBLIC_URL: ${KIBANA_PUBLIC_URL}
      MONITORING_UI_CONTAINER_ELASTICSEARCH_ENABLED: true
    env_file:
      - ./secrets/.env.kibana.token
    configs:
      - source: kibana
        target: /usr/share/kibana/config/kibana.yml
    secrets:
      - source: elastic.ca
        target: /certs/ca.crt
      - source: kibana.certificate
        target: /certs/kibana.crt
      - source: kibana.key
        target: /certs/kibana.key
    networks:
      - web_net
      - app_net
    depends_on:
      elasticsearch-node-1:
        condition: service_healthy
      elasticsearch-node-2:
        condition: service_healthy
      elasticsearch-node-3:
        condition: service_healthy
    healthcheck:
      test: "curl -kf https://localhost:5601/login | grep kbn-injected-metadata 2>&1 >/dev/null"
      retries: 60
      interval: 30s
    labels:
      - traefik.enable=true
      - traefik.docker.network=web_net
      - traefik.http.routers.kibana3.entrypoints=http
      - traefik.http.routers.kibana3.rule=Host(`${KIBANA3_SUB_DOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.kibana3.middlewares=https-redirect
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.routers.kibana3-secure.entrypoints=https
      - traefik.http.routers.kibana3-secure.rule=Host(`${KIBANA3_SUB_DOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.kibana3-secure.tls=true
      - traefik.http.routers.kibana3-secure.tls.options=default
      - traefik.http.routers.kibana3-secure.tls.certresolver=mycert
      - traefik.http.services.kibana3.loadbalancer.server.scheme=https
      - traefik.http.services.kibana3.loadbalancer.server.port=5601

  fleet-node-1:
    image: elastic/elastic-agent:${ELK_VERSION}
    restart: ${RESTART_POLICY}
    container_name: fleet-node-1
    hostname: fleet-node-1
    environment:
      - ELASTICSEARCH_USERNAME=${ELASTIC_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTICSEARCH_CA=/certs/ca.crt
      - FLEET_SERVER_ENABLE=true
      - FLEET_SERVER_ELASTICSEARCH_HOST=https://elasticsearch-node-1:9200
      - FLEET_SERVER_INSECURE_HTTP=true
      - FLEET_SERVER_HOST=0.0.0.0
      - FLEET_SERVER_PORT=8220
      - FLEET_SERVER_SERVICE_TOKEN=${FLEET_SERVER_SERVICE_TOKEN}
    secrets:
      - source: elastic.ca
        target: /certs/ca.crt
      - source: fleet.certificate
        target: /certs/fleet.crt
      - source: fleet.key
        target: /certs/fleet.key
      - source: kibana.certificate
        target: /certs/kibana.crt
      - source: kibana.key
        target: /certs/kibana.key
    networks:
      - app_net
      - web_net
    depends_on:
      elasticsearch-node-1:
        condition: service_healthy
      elasticsearch-node-2:
        condition: service_healthy
      elasticsearch-node-3:
        condition: service_healthy
    healthcheck:
      test: "curl -f http://127.0.0.1:8220/api/status | grep HEALTHY 2>&1 >/dev/null"
      retries: 12
      interval: 5s
    labels:
      - traefik.enable=true
      - traefik.docker.network=web_net
      - traefik.http.routers.fleet1.entrypoints=http
      - traefik.http.routers.fleet1.rule=Host(`${FLEET1_SUB_DOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.fleet1.middlewares=https-redirect
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.routers.fleet1-secure.entrypoints=https
      - traefik.http.routers.fleet1-secure.rule=Host(`${FLEET1_SUB_DOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.fleet1-secure.tls=true
      - traefik.http.routers.fleet1-secure.tls.options=default
      - traefik.http.routers.fleet1-secure.tls.certresolver=mycert
      - traefik.http.services.fleet1.loadbalancer.server.port=8220

  fleet-node-2:
    image: elastic/elastic-agent:${ELK_VERSION}
    restart: ${RESTART_POLICY}
    container_name: fleet-node-2
    hostname: fleet-node-2
    environment:
      - ELASTICSEARCH_USERNAME=${ELASTIC_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTICSEARCH_CA=/certs/ca.crt
      - FLEET_SERVER_ENABLE=true
      - FLEET_SERVER_ELASTICSEARCH_HOST=https://elasticsearch-node-1:9200
      - FLEET_SERVER_INSECURE_HTTP=true
      - FLEET_SERVER_HOST=0.0.0.0
      - FLEET_SERVER_PORT=8220
      - FLEET_SERVER_SERVICE_TOKEN=${FLEET_SERVER_SERVICE_TOKEN}
    secrets:
      - source: elastic.ca
        target: /certs/ca.crt
      - source: fleet.certificate
        target: /certs/fleet.crt
      - source: fleet.key
        target: /certs/fleet.key
      - source: kibana.certificate
        target: /certs/kibana.crt
      - source: kibana.key
        target: /certs/kibana.key
    networks:
      - app_net
      - web_net
    depends_on:
      elasticsearch-node-1:
        condition: service_healthy
      elasticsearch-node-2:
        condition: service_healthy
      elasticsearch-node-3:
        condition: service_healthy
    healthcheck:
      test: "curl -f http://127.0.0.1:8220/api/status | grep HEALTHY 2>&1 >/dev/null"
      retries: 12
      interval: 5s
    labels:
      - traefik.enable=true
      - traefik.docker.network=web_net
      - traefik.http.routers.fleet2.entrypoints=http
      - traefik.http.routers.fleet2.rule=Host(`${FLEET2_SUB_DOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.fleet2.middlewares=https-redirect
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.routers.fleet2-secure.entrypoints=https
      - traefik.http.routers.fleet2-secure.rule=Host(`${FLEET2_SUB_DOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.fleet2-secure.tls=true
      - traefik.http.routers.fleet2-secure.tls.options=default
      - traefik.http.routers.fleet2-secure.tls.certresolver=mycert
      - traefik.http.services.fleet2.loadbalancer.server.port=8220

  fleet-node-3:
    image: elastic/elastic-agent:${ELK_VERSION}
    restart: ${RESTART_POLICY}
    container_name: fleet-node-3
    hostname: fleet-node-3
    environment:
      - ELASTICSEARCH_USERNAME=${ELASTIC_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTICSEARCH_CA=/certs/ca.crt
      - FLEET_SERVER_ENABLE=true
      - FLEET_SERVER_ELASTICSEARCH_HOST=https://elasticsearch-node-1:9200
      - FLEET_SERVER_INSECURE_HTTP=true
      - FLEET_SERVER_HOST=0.0.0.0
      - FLEET_SERVER_PORT=8220
      - FLEET_SERVER_SERVICE_TOKEN=${FLEET_SERVER_SERVICE_TOKEN}
    secrets:
      - source: elastic.ca
        target: /certs/ca.crt
      - source: fleet.certificate
        target: /certs/fleet.crt
      - source: fleet.key
        target: /certs/fleet.key
      - source: kibana.certificate
        target: /certs/kibana.crt
      - source: kibana.key
        target: /certs/kibana.key
    networks:
      - app_net
      - web_net
    depends_on:
      elasticsearch-node-1:
        condition: service_healthy
      elasticsearch-node-2:
        condition: service_healthy
      elasticsearch-node-3:
        condition: service_healthy
    healthcheck:
      test: "curl -f http://127.0.0.1:8220/api/status | grep HEALTHY 2>&1 >/dev/null"
      retries: 12
      interval: 5s
    labels:
      - traefik.enable=true
      - traefik.docker.network=web_net
      - traefik.http.routers.fleet3.entrypoints=http
      - traefik.http.routers.fleet3.rule=Host(`${FLEET3_SUB_DOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.fleet3.middlewares=https-redirect
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.routers.fleet3-secure.entrypoints=https
      - traefik.http.routers.fleet3-secure.rule=Host(`${FLEET3_SUB_DOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.fleet3-secure.tls=true
      - traefik.http.routers.fleet3-secure.tls.options=default
      - traefik.http.routers.fleet3-secure.tls.certresolver=mycert
      - traefik.http.services.fleet3.loadbalancer.server.port=8220