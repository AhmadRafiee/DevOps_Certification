name: observability

networks:
  web_net:
    external: true
  app_net:
    external: true

volumes:
  traefik_data:
    name: traefik_data
  grafana_data:
    name: grafana_data
  prometheus_data:
    name: prometheus_data
  alertmanager_data:
    name: alertmanager_data
  pushgateway_data:
    name: pushgateway_data
  loki_data:
    name: loki_data
  tempo_data:
    name: tempo_data

services:
  traefik:
    image: traefik:${TRAEFIK_TAG}
    restart: ${RESTART_POLICY}
    container_name: traefik
    command:
      - "--log.level=ERROR"
      - "--log.filepath=/log-file.log"
      - "--log.format=json"
      - "--api=true"
      - "--ping=true"
      - "--accesslog=true"
      - "--accesslog.fields.names.StartUTC=drop"
      - "--accesslog.bufferingsize=250"
      - "--api.insecure=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=web_net"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      - "--metrics.prometheus=true"
      - "--entryPoints.metrics.address=:8082"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--certificatesresolvers.mycert.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.mycert.acme.storage=/acme/acme.json"
      - "--certificatesresolvers.mycert.acme.tlschallenge=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/acme
    profiles:
      - web
      - observability
    labels:
      - traefik.enable=true
      - traefik.docker.network=web_net
      - traefik.http.routers.traefik.entrypoints=http
      - traefik.http.routers.traefik.rule=Host(`${TRAEFIK_SUB}.${DOMAIN_ADDRESS}`)
      - traefik.http.middlewares.web-auth.basicauth.users=${WEB_AUTH_USER}:${WEB_AUTH_PASS}
      - traefik.http.routers.traefik.middlewares=https-redirect
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.routers.traefik-secure.entrypoints=https
      - traefik.http.routers.traefik-secure.rule=Host(`${TRAEFIK_SUB}.${DOMAIN_ADDRESS}`)
      - traefik.http.routers.traefik-secure.tls=true
      - traefik.http.routers.traefik-secure.tls.options=default
      - traefik.http.routers.traefik-secure.middlewares=web-auth
      - traefik.http.routers.traefik-secure.tls.certresolver=mycert
      - traefik.http.services.traefik.loadbalancer.server.port=8080
    networks:
      - web_net

  prometheus:
    image: prom/prometheus:${PROMETHEUS_TAG}
    restart: ${RESTART_POLICY}
    container_name: prometeheus
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus:/etc/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=30d
      - --storage.tsdb.retention.size=150GB
      - --web.enable-lifecycle
    networks:
      - web_net
      - app_net
    profiles:
      - observability
      - monitoring
    labels:
      - traefik.enable=true
      - traefik.docker.network=web_net
      - traefik.http.routers.prometheus.entrypoints=http
      - traefik.http.routers.prometheus.rule=Host(`${PROMETHEUS_SUB}.${DOMAIN_ADDRESS}`)
      - traefik.http.routers.prometheus.middlewares=https-redirect
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.routers.prometheus-secure.entrypoints=https
      - traefik.http.routers.prometheus-secure.rule=Host(`${PROMETHEUS_SUB}.${DOMAIN_ADDRESS}`)
      - traefik.http.routers.prometheus-secure.tls=true
      - traefik.http.routers.prometheus-secure.tls.options=default
      - traefik.http.routers.prometheus-secure.middlewares=web-auth
      - traefik.http.routers.prometheus-secure.tls.certresolver=mycert
      - traefik.http.services.prometheus.loadbalancer.server.port=9090

  grafana:
    image: grafana/grafana:${GRAFANA_TAG}
    restart: ${RESTART_POLICY}
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/:/etc/grafana/provisioning/
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=${GRAFANA_INSTALL_PLUGINS}
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_PATHS_DATA=/var/lib/grafana
      - GF_USERS_DEFAULT_THEME=light
      - GF_LOG_MODE=console
      - GF_LOG_LEVEL=critical
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    networks:
      - web_net
      - app_net
    profiles:
      - monitoring
      - logging
      - visualizations
      - observability
    labels:
      - traefik.enable=true
      - traefik.docker.network=web_net
      - traefik.http.routers.grafana.entrypoints=http
      - traefik.http.routers.grafana.rule=Host(`${GRAFANA_SUB}.${DOMAIN_ADDRESS}`)
      - traefik.http.routers.grafana.middlewares=https-redirect
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.routers.grafana-secure.entrypoints=https
      - traefik.http.routers.grafana-secure.rule=Host(`${GRAFANA_SUB}.${DOMAIN_ADDRESS}`)
      - traefik.http.routers.grafana-secure.tls=true
      - traefik.http.routers.grafana-secure.tls.options=default
      - traefik.http.routers.grafana-secure.tls.certresolver=mycert
      - traefik.http.services.grafana.loadbalancer.server.port=3000

  alertmanager:
    image: prom/alertmanager:${ALERTMANAGER_TAG}
    restart: ${RESTART_POLICY}
    container_name: alertmanager
    volumes:
      - alertmanager_data:/alertmanager
      - ./alertmanager:/etc/alertmanager
    command:
      - --config.file=/etc/alertmanager/alertmanager.yml
      - --storage.path=/alertmanager
    networks:
      - web_net
      - app_net
    profiles:
      - monitoring
      - alerting
      - observability
    labels:
      - traefik.enable=true
      - traefik.docker.network=web_net
      - traefik.http.routers.alert.entrypoints=http
      - traefik.http.routers.alert.rule=Host(`${ALERTMANAGER_SUB}.${DOMAIN_ADDRESS}`)
      - traefik.http.routers.alert.middlewares=https-redirect
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.routers.alert-secure.entrypoints=https
      - traefik.http.routers.alert-secure.rule=Host(`${ALERTMANAGER_SUB}.${DOMAIN_ADDRESS}`)
      - traefik.http.routers.alert-secure.tls=true
      - traefik.http.routers.alert-secure.tls.options=default
      - traefik.http.routers.alert-secure.middlewares=web-auth
      - traefik.http.routers.alert-secure.tls.certresolver=mycert
      - traefik.http.services.alert.loadbalancer.server.port=9093

  pushgateway:
    image: prom/pushgateway:${PUSHGATEWAY_TAG}
    restart: ${RESTART_POLICY}
    container_name: pushgateway
    command:
      - --persistence.file=/tmp/pushgateway.store
      - --persistence.interval=1m
    volumes:
      - pushgateway_data:/tmp/
    networks:
      - web_net
      - app_net
    profiles:
      - monitoring
      - observability
    labels:
      - traefik.enable=true
      - traefik.docker.network=web_net
      - traefik.http.routers.push.entrypoints=http
      - traefik.http.routers.push.rule=Host(`${PUSHGATEWAY_SUB}.${DOMAIN_ADDRESS}`)
      - traefik.http.routers.push.middlewares=https-redirect
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.routers.push-secure.entrypoints=https
      - traefik.http.routers.push-secure.rule=Host(`${PUSHGATEWAY_SUB}.${DOMAIN_ADDRESS}`)
      - traefik.http.routers.push-secure.tls=true
      - traefik.http.routers.push-secure.tls.options=default
      - traefik.http.routers.push-secure.middlewares=web-auth
      - traefik.http.routers.push-secure.tls.certresolver=mycert
      - traefik.http.services.push.loadbalancer.server.port=9091

  cadvisor:
    image: docker.io/ahmadrafiee/cadvisor:${CADVISOR_TAG}
    command: --disable_metrics=disk,udp,percpu
    restart: ${RESTART_POLICY}
    hostname: '${HOSTNAME}'
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - app_net
    profiles:
      - monitoring
      - observability

  blackbox-exporter:
    image: prom/blackbox-exporter:${BLACKBOX_TAG}
    restart: ${RESTART_POLICY}
    hostname: '${HOSTNAME}'
    container_name: blackbox-exporter
    command:
      - '--config.file=/etc/blackboxexporter/blackbox-exporter.yml'
    volumes:
      - ./blackbox:/etc/blackboxexporter
    networks:
      - app_net
    profiles:
      - observability
      - monitoring

  node-exporter:
    image: prom/node-exporter:${NODE_EXPORTER_TAG}
    restart: ${RESTART_POLICY}
    hostname: '${HOSTNAME}'
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    networks:
      - app_net
    profiles:
      - monitoring
      - observability

  loki:
    image: grafana/loki:${LOKI_TAG}
    command: -config.file=/etc/loki/loki.yml
    restart: ${RESTART_POLICY}
    container_name: loki
    user: root
    volumes:
      - loki_data:/tmp/loki
      - ./loki:/etc/loki/
    networks:
      - web_net
      - app_net
    profiles:
      - observability
      - logging
    labels:
      - traefik.enable=true
      - traefik.docker.network=web_net
      - traefik.http.routers.loki.entrypoints=http
      - traefik.http.routers.loki.rule=Host(`${LOKI_SUB}.${DOMAIN_ADDRESS}`)
      - traefik.http.routers.loki.middlewares=https-redirect
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.routers.loki-secure.entrypoints=https
      - traefik.http.routers.loki-secure.rule=Host(`${LOKI_SUB}.${DOMAIN_ADDRESS}`)
      - traefik.http.routers.loki-secure.tls=true
      - traefik.http.routers.loki-secure.tls.options=default
      - traefik.http.routers.loki-secure.middlewares=web-auth
      - traefik.http.routers.loki-secure.tls.certresolver=mycert
      - traefik.http.services.loki.loadbalancer.server.port=3100

  promtail:
    image: grafana/promtail:${PROMTAIL_TAG}
    restart: ${RESTART_POLICY}
    container_name: promtail
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail:/etc/promtail/
    command: -config.file=/etc/promtail/promtail.yml
    networks:
      - app_net
    profiles:
      - observability
      - logging

  memcached:
    image: memcached:${MEMCACHED_TAG}
    container_name: memcached
    hostname: memcached
    restart: ${RESTART_POLICY}
    environment:
      - MEMCACHED_MAX_MEMORY=64m  # Set the maximum memory usage
      - MEMCACHED_THREADS=4       # Number of threads to use
    networks:
      - app_net
    profiles:
      - observability
      - tracing

  tempo:
    image: grafana/tempo:${TEMPO_SUB}
    container_name: tempo
    hostname: tempo
    restart: ${RESTART_POLICY}
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo.yaml
      - tempo_data:/var/tempo
    ports:
      - "14268:14268"   # jaeger ingest
      - "3200:3200"     # tempo
      - "9095:9095"     # tempo grpc
      - "4317:4317"     # otlp grpc
      - "4318:4318"     # otlp http
      - "9411:9411"     # zipkin
    networks:
      - app_net
    profiles:
      - observability
      - tracing

  k6-tracing:
    image: ghcr.io/grafana/xk6-client-tracing:${K6_TARCING_TAG}
    container_name: k6-tracing
    hostname: k6-tracing
    restart: ${RESTART_POLICY}
    environment:
      - ENDPOINT=tempo:4317
    depends_on:
      - tempo
    networks:
      - app_net
    profiles:
      - tracing
      - tracing-load
      - observability